####### DO NOT TOUCH #######
# MODULES 
import sys, os
import numpy as np
import pandas as pd
from scipy import stats
import matplotlib
import matplotlib.dates as mdates

# PRESSION
intercept = float(df_Calibration.iloc[2][list(df_Calibration.columns)[-1]])
dUdH = float(df_Calibration.iloc[3][list(df_Calibration.columns)[-1]])
dUdT = float(df_Calibration.iloc[4][list(df_Calibration.columns)[-1]])

df_Pressure["charge_diff"] = (df_Pressure["tension"]-df_Pressure["t_stream"]*dUdT-intercept)/dUdH
df_Pressure.drop(labels="tension",axis=1,inplace=True)

self.df_loaded = df_Pressure.merge(df_ZH, how='outer', on="date").sort_values('date').reset_index().drop('index',axis=1)
self.varList = list(self.df_loaded.columns)
self.df_cleaned = self.df_loaded.copy().dropna()
self.df_selected = pd.DataFrame(columns=self.varList)

# TIMES
print("Here we get the tempreatures right")

# METHODS
# t_stream

# charge_diff

# t1

# t2

# t3

# t4

# MANUAL SELECTED POINTS

selected_df = pd.read_csv("selected_points.csv")

for i in self.varList[1:]:
    df_var = selected_df[["date",i]].dropna()
    values = self.df_cleaned.apply(lambda x: np.nan if mdates.date2num(x['date']) in list(mdates.date2num(df_var['date'])) else x[i],axis=1)
    self.df_cleaned.loc[:,i] = values

# YOU CAN TOUCH - USER DEFINED FUNCTION

# SMOOTH